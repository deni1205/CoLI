/**
 * originally from https://github.com/microsoft/TypeScript/blob/master/src/compiler/types.ts
 */
export const enum SyntaxKind {
  Unknown = "Unknown",
  EndOfFileToken = "EndOfFileToken",
  SingleLineCommentTrivia = "SingleLineCommentTrivia",
  MultiLineCommentTrivia = "MultiLineCommentTrivia",
  NewLineTrivia = "NewLineTrivia",
  WhitespaceTrivia = "WhitespaceTrivia",
  // = "//" We detect and preserve #! on the first line
  ShebangTrivia = "ShebangTrivia",
  // = "//" We detect and provide better error recovery when we encounter a git merge marker.  This
  // = "//" allows us to edit files with git-conflict markers in them in a much more pleasant manner.
  ConflictMarkerTrivia = "ConflictMarkerTrivia",
  // = "//" Literals
  NumericLiteral = "NumericLiteral",
  BigIntLiteral = "BigIntLiteral",
  StringLiteral = "StringLiteral",
  JsxText = "JsxText",
  JsxTextAllWhiteSpaces = "JsxTextAllWhiteSpaces",
  RegularExpressionLiteral = "RegularExpressionLiteral",
  NoSubstitutionTemplateLiteral = "NoSubstitutionTemplateLiteral",
  // = "//" Pseudo-literals
  TemplateHead = "TemplateHead",
  TemplateMiddle = "TemplateMiddle",
  TemplateTail = "TemplateTail",
  // = "//" Punctuation
  OpenBraceToken = "OpenBraceToken",
  CloseBraceToken = "CloseBraceToken",
  OpenParenToken = "OpenParenToken",
  CloseParenToken = "CloseParenToken",
  OpenBracketToken = "OpenBracketToken",
  CloseBracketToken = "CloseBracketToken",
  DotToken = "DotToken",
  DotDotDotToken = "DotDotDotToken",
  SemicolonToken = "SemicolonToken",
  CommaToken = "CommaToken",
  QuestionDotToken = "QuestionDotToken",
  LessThanToken = "LessThanToken",
  LessThanSlashToken = "LessThanSlashToken",
  GreaterThanToken = "GreaterThanToken",
  LessThanEqualsToken = "LessThanEqualsToken",
  GreaterThanEqualsToken = "GreaterThanEqualsToken",
  EqualsEqualsToken = "EqualsEqualsToken",
  ExclamationEqualsToken = "ExclamationEqualsToken",
  EqualsEqualsEqualsToken = "EqualsEqualsEqualsToken",
  ExclamationEqualsEqualsToken = "ExclamationEqualsEqualsToken",
  EqualsGreaterThanToken = "EqualsGreaterThanToken",
  PlusToken = "PlusToken",
  MinusToken = "MinusToken",
  AsteriskToken = "AsteriskToken",
  AsteriskAsteriskToken = "AsteriskAsteriskToken",
  SlashToken = "SlashToken",
  PercentToken = "PercentToken",
  PlusPlusToken = "PlusPlusToken",
  MinusMinusToken = "MinusMinusToken",
  LessThanLessThanToken = "LessThanLessThanToken",
  GreaterThanGreaterThanToken = "GreaterThanGreaterThanToken",
  GreaterThanGreaterThanGreaterThanToken = "GreaterThanGreaterThanGreaterThanToken",
  AmpersandToken = "AmpersandToken",
  BarToken = "BarToken",
  CaretToken = "CaretToken",
  ExclamationToken = "ExclamationToken",
  TildeToken = "TildeToken",
  AmpersandAmpersandToken = "AmpersandAmpersandToken",
  BarBarToken = "BarBarToken",
  QuestionToken = "QuestionToken",
  ColonToken = "ColonToken",
  AtToken = "AtToken",
  QuestionQuestionToken = "QuestionQuestionToken",
  /** = "/**" Only the JSDoc scanner produces BacktickToken. The normal scanner produces NoSubstitutionTemplateLiteral and related kinds. */
  BacktickToken = "BacktickToken",
  // = "//" Assignments
  EqualsToken = "EqualsToken",
  PlusEqualsToken = "PlusEqualsToken",
  MinusEqualsToken = "MinusEqualsToken",
  AsteriskEqualsToken = "AsteriskEqualsToken",
  AsteriskAsteriskEqualsToken = "AsteriskAsteriskEqualsToken",
  SlashEqualsToken = "SlashEqualsToken",
  PercentEqualsToken = "PercentEqualsToken",
  LessThanLessThanEqualsToken = "LessThanLessThanEqualsToken",
  GreaterThanGreaterThanEqualsToken = "GreaterThanGreaterThanEqualsToken",
  GreaterThanGreaterThanGreaterThanEqualsToken = "GreaterThanGreaterThanGreaterThanEqualsToken",
  AmpersandEqualsToken = "AmpersandEqualsToken",
  BarEqualsToken = "BarEqualsToken",
  BarBarEqualsToken = "BarBarEqualsToken",
  AmpersandAmpersandEqualsToken = "AmpersandAmpersandEqualsToken",
  QuestionQuestionEqualsToken = "QuestionQuestionEqualsToken",
  CaretEqualsToken = "CaretEqualsToken",
  // = "//" Identifiers and PrivateIdentifiers
  Identifier = "Identifier",
  PrivateIdentifier = "PrivateIdentifier",
  // = "//" Reserved words
  BreakKeyword = "BreakKeyword",
  CaseKeyword = "CaseKeyword",
  CatchKeyword = "CatchKeyword",
  ClassKeyword = "ClassKeyword",
  ConstKeyword = "ConstKeyword",
  ContinueKeyword = "ContinueKeyword",
  DebuggerKeyword = "DebuggerKeyword",
  DefaultKeyword = "DefaultKeyword",
  DeleteKeyword = "DeleteKeyword",
  DoKeyword = "DoKeyword",
  ElseKeyword = "ElseKeyword",
  EnumKeyword = "EnumKeyword",
  ExportKeyword = "ExportKeyword",
  ExtendsKeyword = "ExtendsKeyword",
  FalseKeyword = "FalseKeyword",
  FinallyKeyword = "FinallyKeyword",
  ForKeyword = "ForKeyword",
  FunctionKeyword = "FunctionKeyword",
  IfKeyword = "IfKeyword",
  ImportKeyword = "ImportKeyword",
  InKeyword = "InKeyword",
  InstanceOfKeyword = "InstanceOfKeyword",
  NewKeyword = "NewKeyword",
  NullKeyword = "NullKeyword",
  ReturnKeyword = "ReturnKeyword",
  SuperKeyword = "SuperKeyword",
  SwitchKeyword = "SwitchKeyword",
  ThisKeyword = "ThisKeyword",
  ThrowKeyword = "ThrowKeyword",
  TrueKeyword = "TrueKeyword",
  TryKeyword = "TryKeyword",
  TypeOfKeyword = "TypeOfKeyword",
  VarKeyword = "VarKeyword",
  VoidKeyword = "VoidKeyword",
  WhileKeyword = "WhileKeyword",
  WithKeyword = "WithKeyword",
  // = "//" Strict mode reserved words
  ImplementsKeyword = "ImplementsKeyword",
  InterfaceKeyword = "InterfaceKeyword",
  LetKeyword = "LetKeyword",
  PackageKeyword = "PackageKeyword",
  PrivateKeyword = "PrivateKeyword",
  ProtectedKeyword = "ProtectedKeyword",
  PublicKeyword = "PublicKeyword",
  StaticKeyword = "StaticKeyword",
  YieldKeyword = "YieldKeyword",
  // = "//" Contextual keywords
  AbstractKeyword = "AbstractKeyword",
  AsKeyword = "AsKeyword",
  AssertsKeyword = "AssertsKeyword",
  AnyKeyword = "AnyKeyword",
  AsyncKeyword = "AsyncKeyword",
  AwaitKeyword = "AwaitKeyword",
  BooleanKeyword = "BooleanKeyword",
  ConstructorKeyword = "ConstructorKeyword",
  DeclareKeyword = "DeclareKeyword",
  GetKeyword = "GetKeyword",
  InferKeyword = "InferKeyword",
  IntrinsicKeyword = "IntrinsicKeyword",
  IsKeyword = "IsKeyword",
  KeyOfKeyword = "KeyOfKeyword",
  ModuleKeyword = "ModuleKeyword",
  NamespaceKeyword = "NamespaceKeyword",
  NeverKeyword = "NeverKeyword",
  ReadonlyKeyword = "ReadonlyKeyword",
  RequireKeyword = "RequireKeyword",
  NumberKeyword = "NumberKeyword",
  ObjectKeyword = "ObjectKeyword",
  SetKeyword = "SetKeyword",
  StringKeyword = "StringKeyword",
  SymbolKeyword = "SymbolKeyword",
  TypeKeyword = "TypeKeyword",
  UndefinedKeyword = "UndefinedKeyword",
  UniqueKeyword = "UniqueKeyword",
  UnknownKeyword = "UnknownKeyword",
  FromKeyword = "FromKeyword",
  GlobalKeyword = "GlobalKeyword",
  BigIntKeyword = "BigIntKeyword",
  OverrideKeyword = "OverrideKeyword",
  OfKeyword = "OfKeyword", // LastKeyword and LastToken and LastContextualKeyword

  // = "
  //" Parse tree nodes

  // = "
  //" Names
  QualifiedName = "QualifiedName",
  ComputedPropertyName = "ComputedPropertyName",
  // = "//" Signature elements
  TypeParameter = "TypeParameter",
  Parameter = "Parameter",
  Decorator = "Decorator",
  // = "//" TypeMember
  PropertySignature = "PropertySignature",
  PropertyDeclaration = "PropertyDeclaration",
  MethodSignature = "MethodSignature",
  MethodDeclaration = "MethodDeclaration",
  Constructor = "Constructor",
  GetAccessor = "GetAccessor",
  SetAccessor = "SetAccessor",
  CallSignature = "CallSignature",
  ConstructSignature = "ConstructSignature",
  IndexSignature = "IndexSignature",
  // = "//" Type
  TypePredicate = "TypePredicate",
  TypeReference = "TypeReference",
  FunctionType = "FunctionType",
  ConstructorType = "ConstructorType",
  TypeQuery = "TypeQuery",
  TypeLiteral = "TypeLiteral",
  ArrayType = "ArrayType",
  TupleType = "TupleType",
  OptionalType = "OptionalType",
  RestType = "RestType",
  UnionType = "UnionType",
  IntersectionType = "IntersectionType",
  ConditionalType = "ConditionalType",
  InferType = "InferType",
  ParenthesizedType = "ParenthesizedType",
  ThisType = "ThisType",
  TypeOperator = "TypeOperator",
  IndexedAccessType = "IndexedAccessType",
  MappedType = "MappedType",
  LiteralType = "LiteralType",
  NamedTupleMember = "NamedTupleMember",
  TemplateLiteralType = "TemplateLiteralType",
  TemplateLiteralTypeSpan = "TemplateLiteralTypeSpan",
  ImportType = "ImportType",
  // = "//" Binding patterns
  ObjectBindingPattern = "ObjectBindingPattern",
  ArrayBindingPattern = "ArrayBindingPattern",
  BindingElement = "BindingElement",
  // = "//" Expression
  ArrayLiteralExpression = "ArrayLiteralExpression",
  ObjectLiteralExpression = "ObjectLiteralExpression",
  PropertyAccessExpression = "PropertyAccessExpression",
  ElementAccessExpression = "ElementAccessExpression",
  CallExpression = "CallExpression",
  NewExpression = "NewExpression",
  TaggedTemplateExpression = "TaggedTemplateExpression",
  TypeAssertionExpression = "TypeAssertionExpression",
  ParenthesizedExpression = "ParenthesizedExpression",
  FunctionExpression = "FunctionExpression",
  ArrowFunction = "ArrowFunction",
  DeleteExpression = "DeleteExpression",
  TypeOfExpression = "TypeOfExpression",
  VoidExpression = "VoidExpression",
  AwaitExpression = "AwaitExpression",
  PrefixUnaryExpression = "PrefixUnaryExpression",
  PostfixUnaryExpression = "PostfixUnaryExpression",
  BinaryExpression = "BinaryExpression",
  ConditionalExpression = "ConditionalExpression",
  TemplateExpression = "TemplateExpression",
  YieldExpression = "YieldExpression",
  SpreadElement = "SpreadElement",
  ClassExpression = "ClassExpression",
  OmittedExpression = "OmittedExpression",
  ExpressionWithTypeArguments = "ExpressionWithTypeArguments",
  AsExpression = "AsExpression",
  NonNullExpression = "NonNullExpression",
  MetaProperty = "MetaProperty",
  SyntheticExpression = "SyntheticExpression",

  // = "
  //" Misc
  TemplateSpan = "TemplateSpan",
  SemicolonClassElement = "SemicolonClassElement",
  // = "//" Element
  Block = "Block",
  EmptyStatement = "EmptyStatement",
  VariableStatement = "VariableStatement",
  ExpressionStatement = "ExpressionStatement",
  IfStatement = "IfStatement",
  DoStatement = "DoStatement",
  WhileStatement = "WhileStatement",
  ForStatement = "ForStatement",
  ForInStatement = "ForInStatement",
  ForOfStatement = "ForOfStatement",
  ContinueStatement = "ContinueStatement",
  BreakStatement = "BreakStatement",
  ReturnStatement = "ReturnStatement",
  WithStatement = "WithStatement",
  SwitchStatement = "SwitchStatement",
  LabeledStatement = "LabeledStatement",
  ThrowStatement = "ThrowStatement",
  TryStatement = "TryStatement",
  DebuggerStatement = "DebuggerStatement",
  VariableDeclaration = "VariableDeclaration",
  VariableDeclarationList = "VariableDeclarationList",
  FunctionDeclaration = "FunctionDeclaration",
  ClassDeclaration = "ClassDeclaration",
  InterfaceDeclaration = "InterfaceDeclaration",
  TypeAliasDeclaration = "TypeAliasDeclaration",
  EnumDeclaration = "EnumDeclaration",
  ModuleDeclaration = "ModuleDeclaration",
  ModuleBlock = "ModuleBlock",
  CaseBlock = "CaseBlock",
  NamespaceExportDeclaration = "NamespaceExportDeclaration",
  ImportEqualsDeclaration = "ImportEqualsDeclaration",
  ImportDeclaration = "ImportDeclaration",
  ImportClause = "ImportClause",
  NamespaceImport = "NamespaceImport",
  NamedImports = "NamedImports",
  ImportSpecifier = "ImportSpecifier",
  ExportAssignment = "ExportAssignment",
  ExportDeclaration = "ExportDeclaration",
  NamedExports = "NamedExports",
  NamespaceExport = "NamespaceExport",
  ExportSpecifier = "ExportSpecifier",
  MissingDeclaration = "MissingDeclaration",

  // = "
  //" Module references
  ExternalModuleReference = "ExternalModuleReference",

  // JSX
  JsxElement = "JsxElement",
  JsxSelfClosingElement = "JsxSelfClosingElement",
  JsxOpeningElement = "JsxOpeningElement",
  JsxClosingElement = "JsxClosingElement",
  JsxFragment = "JsxFragment",
  JsxOpeningFragment = "JsxOpeningFragment",
  JsxClosingFragment = "JsxClosingFragment",
  JsxAttribute = "JsxAttribute",
  JsxAttributes = "JsxAttributes",
  JsxSpreadAttribute = "JsxSpreadAttribute",
  JsxExpression = "JsxExpression",

  // = "
  //" Clauses
  CaseClause = "CaseClause",
  DefaultClause = "DefaultClause",
  HeritageClause = "HeritageClause",
  CatchClause = "CatchClause",

  // = "
  //" Property assignments
  PropertyAssignment = "PropertyAssignment",
  ShorthandPropertyAssignment = "ShorthandPropertyAssignment",
  SpreadAssignment = "SpreadAssignment",

  // = "
  //" Enum
  EnumMember = "EnumMember",
  // = "//" Unparsed
  UnparsedPrologue = "UnparsedPrologue",
  UnparsedPrepend = "UnparsedPrepend",
  UnparsedText = "UnparsedText",
  UnparsedInternalText = "UnparsedInternalText",
  UnparsedSyntheticReference = "UnparsedSyntheticReference",

  // Top-level nodes
  SourceFile = "SourceFile",
  Bundle = "Bundle",
  UnparsedSource = "UnparsedSource",
  InputFiles = "InputFiles",

  // JSDoc nodes
  /*
  JSDocTypeExpression,
  JSDocNameReference,
  JSDocAllType, // The * type
  JSDocUnknownType, // The ? type
  JSDocNullableType,
  JSDocNonNullableType,
  JSDocOptionalType,
  JSDocFunctionType,
  JSDocVariadicType,
  JSDocNamepathType, // https://jsdoc.app/about-namepaths.html
  JSDocComment,
  JSDocText,
  JSDocTypeLiteral,
  JSDocSignature,
  JSDocLink,
  JSDocTag,
  JSDocAugmentsTag,
  JSDocImplementsTag,
  JSDocAuthorTag,
  JSDocDeprecatedTag,
  JSDocClassTag,
  JSDocPublicTag,
  JSDocPrivateTag,
  JSDocProtectedTag,
  JSDocReadonlyTag,
  JSDocOverrideTag,
  JSDocCallbackTag,
  JSDocEnumTag,
  JSDocParameterTag,
  JSDocReturnTag,
  JSDocThisTag,
  JSDocTypeTag,
  JSDocTemplateTag,
  JSDocTypedefTag,
  JSDocSeeTag,
  JSDocPropertyTag,
  */

  // Synthesized list
  SyntaxList = "SyntaxList",

  // Transformation nodes
  NotEmittedStatement = "NotEmittedStatement",
  PartiallyEmittedExpression = "PartiallyEmittedExpression",
  CommaListExpression = "CommaListExpression",
  MergeDeclarationMarker = "MergeDeclarationMarker",
  EndOfDeclarationMarker = "EndOfDeclarationMarker",
  SyntheticReferenceExpression = "SyntheticReferenceExpression",

  // Enum value count
  Count = "Count",

  // Markers
  FirstAssignment = EqualsToken,
  LastAssignment = CaretEqualsToken,
  FirstCompoundAssignment = PlusEqualsToken,
  LastCompoundAssignment = CaretEqualsToken,
  FirstReservedWord = BreakKeyword,
  LastReservedWord = WithKeyword,
  FirstKeyword = BreakKeyword,
  LastKeyword = OfKeyword,
  FirstFutureReservedWord = ImplementsKeyword,
  LastFutureReservedWord = YieldKeyword,
  FirstTypeNode = TypePredicate,
  LastTypeNode = ImportType,
  FirstPunctuation = OpenBraceToken,
  LastPunctuation = CaretEqualsToken,
  FirstToken = Unknown,
  LastToken = LastKeyword,
  FirstTriviaToken = SingleLineCommentTrivia,
  LastTriviaToken = ConflictMarkerTrivia,
  FirstLiteralToken = NumericLiteral,
  LastLiteralToken = NoSubstitutionTemplateLiteral,
  FirstTemplateToken = NoSubstitutionTemplateLiteral,
  LastTemplateToken = TemplateTail,
  FirstBinaryOperator = LessThanToken,
  LastBinaryOperator = CaretEqualsToken,
  FirstStatement = VariableStatement,
  LastStatement = DebuggerStatement,
  FirstNode = QualifiedName,
  /*
  FirstJSDocNode = JSDocTypeExpression,
  LastJSDocNode = JSDocPropertyTag,
  FirstJSDocTagNode = JSDocTag,
  LastJSDocTagNode = JSDocPropertyTag,
  */
  /* @internal */ FirstContextualKeyword = AbstractKeyword,
  /* @internal */ LastContextualKeyword = OfKeyword,
}
